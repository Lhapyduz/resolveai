

import React, { useState, useEffect, useCallback, ReactNode } from 'react';
import { Page, UserType, UserProfile, Professional } from './types';
import { OnboardingPage, ClientHomePage, ProfessionalDashboardPage, ProfessionalProfileViewPage, ContractFlowPage, HistoryPage, ProfileEditPage, NotificationsPage } from './views';
import { Button, LoadingSpinner } // UserTypeToggle removed
from './components';
import { APP_NAME, GRADIENT_TEXT_CLASS, SunIcon, MoonIcon, UserIcon, ToolsIcon, CalendarIcon, BellIcon, LogoutIcon } from './constants';
import { supabase, fetchUserProfile } from './supabaseClient'; // Import Supabase client and profile fetcher

const App: React.FC = () => {
  const [isDarkMode, setIsDarkMode] = useState<boolean>(() => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('darkMode') === 'true' || 
             (!('darkMode' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches);
    }
    return false;
  });

  const [currentUser, setCurrentUser] = useState<UserProfile | Professional | null>(null);
  const [authLoading, setAuthLoading] = useState(true);
  const [currentPage, setCurrentPageState] = useState<Page>(Page.ONBOARDING);
  const [pageParams, setPageParams] = useState<Record<string, any> | undefined>(undefined);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  useEffect(() => {
    if (typeof window !== 'undefined') {
      localStorage.setItem('darkMode', String(isDarkMode));
      if (isDarkMode) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    }
  }, [isDarkMode]);

  useEffect(() => {
    if (!supabase) {
      console.warn("Supabase client not available. Auth and data fetching disabled.");
      setAuthLoading(false);
      setCurrentPageState(Page.ONBOARDING); // Fallback to onboarding/login page
      return;
    }

    setAuthLoading(true);
    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {
      try {
        if (session?.user) {
          const profile = await fetchUserProfile(session.user.id);
          if (profile) {
            setCurrentUser(profile);
            setCurrentPageState(profile.userType === UserType.CLIENT ? Page.CLIENT_HOME : Page.PROFESSIONAL_DASHBOARD);
          } else {
            // Profile doesn't exist, user needs to complete signup.
            // Create a temporary user object with essential info from the auth session.
            const tempNewUserProfile: UserProfile = {
              id: '', // This will be generated by Supabase upon insert into 'profiles' table
              user_id: session.user.id, // Crucial link to auth.users table
              email: session.user.email || '',
              name: '', // User will fill this in on ProfileEditPage
              userType: UserType.CLIENT, // Default, user will select this on ProfileEditPage
              avatarUrl: '',
              bio: '',
              location: '',
              phone: '',
              // Ensure all required fields for UserProfile have a default or are optional
            };
            setCurrentUser(tempNewUserProfile); // Set this temporary profile
            setCurrentPageState(Page.PROFILE_EDIT); 
            setPageParams({ isNewProfile: true }); // Pass a flag if needed, ProfileEditPage mainly checks profile.id
          }
        } else {
          setCurrentUser(null);
          setCurrentPageState(Page.ONBOARDING);
        }
      } catch (error) {
        console.error("Error handling auth state change:", error);
        setCurrentUser(null);
        setCurrentPageState(Page.ONBOARDING);
      } finally {
        setAuthLoading(false);
      }
    });

    return () => {
      subscription?.unsubscribe();
    };
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // setCurrentPage dependency removed to avoid re-triggering on navigation


  const toggleDarkMode = () => setIsDarkMode(!isDarkMode);

  const setCurrentPage = useCallback((page: Page, params?: Record<string, any>) => {
    setCurrentPageState(page);
    setPageParams(params);
    setIsMobileMenuOpen(false);
    window.scrollTo(0, 0);
  }, []);

  const handleLogout = async () => {
    if (!supabase) return;
    const { error } = await supabase.auth.signOut();
    if (error) console.error('Error logging out:', error);
    // State will be updated by onAuthStateChange
  };

  const renderPage = () => {
    // Pass non-null currentUser to pages that require it, or handle loading/null state within those pages
    
    if (authLoading && !currentUser) { // If still loading auth and no user yet
        return <div className="flex justify-center items-center min-h-screen"><LoadingSpinner message="Autenticando..." /></div>;
    }
    
    // currentUser can be null if not logged in, or a temp profile if new user, or full profile.
    const props = { setCurrentPage, currentUser: currentUser!, params: pageParams }; // Assert currentUser for pages that require it

    switch (currentPage) {
      case Page.ONBOARDING:
        // If user is already somehow authenticated (e.g. currentUser is a temp profile for new user),
        // but page is ONBOARDING, it might be a brief state before redirect.
        // Or if truly logged out, show Onboarding.
        return <OnboardingPage setCurrentPage={setCurrentPage} />; 
      
      // Authenticated routes below:
      case Page.PROFILE_EDIT:
        if (!currentUser) { // Should not happen if auth flow is correct for new user.
          return <div className="flex justify-center items-center min-h-screen"><LoadingSpinner message="Carregando editor de perfil..." /></div>;
        }
        // currentUser is now either a full profile from DB or a temporary one for new user.
        return <ProfileEditPage {...props} currentUser={currentUser} />;
      
      // Other pages expect a fully loaded, non-temporary currentUser
      case Page.CLIENT_HOME:
        if (!currentUser || !currentUser.id || currentUser.userType !== UserType.CLIENT) { // Check for profile.id to ensure it's not a temp profile
            return <div className="flex justify-center items-center min-h-screen"><LoadingSpinner message="Redirecionando..." /></div>;
        }
        return <ClientHomePage {...props} />;
      case Page.PROFESSIONAL_DASHBOARD:
        if (!currentUser || !currentUser.id || currentUser.userType !== UserType.PROFESSIONAL) {
             return <div className="flex justify-center items-center min-h-screen"><LoadingSpinner message="Redirecionando..." /></div>;
        }
        return <ProfessionalDashboardPage {...props} />;
      case Page.PROFESSIONAL_PROFILE_VIEW:
         if (!currentUser || !currentUser.id) return <div className="flex justify-center items-center min-h-screen"><LoadingSpinner message="Carregando..." /></div>;
        return <ProfessionalProfileViewPage {...props} />;
      case Page.SERVICE_DETAIL: 
         if (!currentUser || !currentUser.id) return <div className="flex justify-center items-center min-h-screen"><LoadingSpinner message="Carregando..." /></div>;
        // SERVICE_DETAIL page might not exist, ProfessionalProfileViewPage is used for similar views
        return <ProfessionalProfileViewPage {...props} />; 
      case Page.CONTRACT_FLOW:
         if (!currentUser || !currentUser.id) return <div className="flex justify-center items-center min-h-screen"><LoadingSpinner message="Carregando..." /></div>;
        return <ContractFlowPage {...props} />;
      case Page.HISTORY:
         if (!currentUser || !currentUser.id) return <div className="flex justify-center items-center min-h-screen"><LoadingSpinner message="Carregando..." /></div>;
        return <HistoryPage {...props} />;
      case Page.NOTIFICATIONS:
         if (!currentUser || !currentUser.id) return <div className="flex justify-center items-center min-h-screen"><LoadingSpinner message="Carregando..." /></div>;
        return <NotificationsPage {...props} />;
      default:
        // Fallback: if logged in (even temp profile), redirect from default, else onboarding.
        if (currentUser) {
            // If it's a temp profile (id is empty), they should be at PROFILE_EDIT.
            // If somehow here, redirect to PROFILE_EDIT.
            if (!currentUser.id) {
                 setCurrentPage(Page.PROFILE_EDIT, { isNewProfile: true });
                 return <div className="flex justify-center items-center min-h-screen"><LoadingSpinner message="Completando cadastro..." /></div>;
            }
            return currentUser.userType === UserType.CLIENT ? <ClientHomePage {...props} /> : <ProfessionalDashboardPage {...props} />;
        }
        return <OnboardingPage setCurrentPage={setCurrentPage} />;
    }
  };
  
  interface NavLinkProps {
    page: Page;
    icon: ReactNode;
    label: string;
    isMobile?: boolean;
    params?: Record<string, any>;
  }

  const NavLink: React.FC<NavLinkProps> = ({ page, icon, label, isMobile = false, params }) => (
    <Button
      variant="ghost"
      onClick={() => setCurrentPage(page, params)}
      className={`!font-medium !text-sm !shadow-none ${currentPage === page ? `${GRADIENT_TEXT_CLASS} font-semibold` : 'text-gray-600 dark:text-dark-subtext hover:text-gray-900 dark:hover:text-white'} ${isMobile ? 'w-full !justify-start !py-3' : ''}`}
      leftIcon={icon}
    >
      {label}
    </Button>
  );

  const commonNavLinks = [
    { page: Page.HISTORY, icon: <CalendarIcon className="w-5 h-5"/>, label: "Histórico" },
    { page: Page.NOTIFICATIONS, icon: <BellIcon className="w-5 h-5"/>, label: "Notificações" },
    { page: Page.PROFILE_EDIT, icon: <UserIcon className="w-5 h-5"/>, label: "Meu Perfil" },
  ];

  const clientNavLinks = [
    { page: Page.CLIENT_HOME, icon: <ToolsIcon className="w-5 h-5"/>, label: "Início Cliente" },
    ...commonNavLinks
  ];

  const professionalNavLinks = [
    { page: Page.PROFESSIONAL_DASHBOARD, icon: <ToolsIcon className="w-5 h-5"/>, label: "Painel Profissional" },
    ...commonNavLinks
  ];
  
  // Determine navLinks, ensure currentUser and its id are present for proper role-based navigation
  const navLinks = (currentUser && currentUser.id) 
    ? (currentUser.userType === UserType.CLIENT ? clientNavLinks : professionalNavLinks)
    : []; // No links if profile is not fully loaded/identified


  if (authLoading && !currentUser) { // Show full page loader only if nothing else is shown yet
    return <div className="min-h-screen bg-gray-100 dark:bg-dark-bg flex items-center justify-center"><LoadingSpinner message="Carregando aplicativo..." /></div>;
  }
  
  // Onboarding page or Profile Edit for new user has its own full-screen layout logic in renderPage
  if ((currentPage === Page.ONBOARDING && !currentUser) || (currentPage === Page.PROFILE_EDIT && currentUser && !currentUser.id)) {
    return <div className="min-h-screen bg-gray-100 dark:bg-dark-bg">{renderPage()}</div>;
  }
  
  // If not authenticated (currentUser is null) and not on a page that handles this (like Onboarding),
  // onAuthStateChange should redirect. renderPage() will handle specific fallbacks.
  if (!currentUser) {
     return <div className="min-h-screen bg-gray-100 dark:bg-dark-bg">{renderPage()}</div>;
  }
  // If currentUser exists but has no .id, it's a temporary profile for a new user,
  // they should be at ProfileEditPage. If they navigated away somehow, redirect them back.
  if (currentUser && !currentUser.id && currentPage !== Page.PROFILE_EDIT) {
      setCurrentPage(Page.PROFILE_EDIT, { isNewProfile: true });
      return <div className="flex justify-center items-center min-h-screen"><LoadingSpinner message="Finalizando cadastro..." /></div>;
  }


  return (
    <div className="min-h-screen flex flex-col bg-gray-100 dark:bg-dark-bg transition-colors duration-300">
      <header className="bg-white dark:bg-dark-surface shadow-md sticky top-0 z-40">
        <div className="container mx-auto px-4 py-3">
          <div className="flex justify-between items-center">
            <div 
              className="flex items-center space-x-2 cursor-pointer" 
              onClick={() => {
                  if (currentUser && currentUser.id) { // Ensure profile is loaded
                    setCurrentPage(currentUser.userType === UserType.CLIENT ? Page.CLIENT_HOME : Page.PROFESSIONAL_DASHBOARD);
                  } else if (currentUser && !currentUser.id) { // New user, direct to profile edit
                    setCurrentPage(Page.PROFILE_EDIT, { isNewProfile: true });
                  }
                  // If currentUser is null, do nothing or redirect to ONBOARDING (handled by main logic)
              }}
            >
              <ToolsIcon className={`w-8 h-8 ${GRADIENT_TEXT_CLASS}`} />
              <span className={`text-2xl font-bold ${GRADIENT_TEXT_CLASS}`}>{APP_NAME}</span>
            </div>

            {currentUser && currentUser.id && ( // Only show nav if user profile is fully loaded
              <nav className="hidden md:flex items-center space-x-2">
                {navLinks.map(link => (
                  <NavLink key={link.page + '-desktop'} {...link} />
                ))}
                <Button variant="ghost" onClick={toggleDarkMode} className="!p-2">
                  {isDarkMode ? <SunIcon className="w-5 h-5 text-yellow-400"/> : <MoonIcon className="w-5 h-5 text-gray-700"/>}
                </Button>
                 <Button variant="ghost" onClick={handleLogout} className="!p-2" title="Logout">
                  <LogoutIcon className="w-5 h-5 text-red-500"/>
                </Button>
              </nav>
            )}

            <div className="md:hidden flex items-center">
                {currentUser && currentUser.id && ( // Show dark mode toggle for logged-in users on mobile
                  <Button variant="ghost" onClick={toggleDarkMode} className="!p-2 mr-2">
                      {isDarkMode ? <SunIcon className="w-5 h-5 text-yellow-400"/> : <MoonIcon className="w-5 h-5 text-gray-700"/>}
                  </Button>
                )}
                {currentUser && currentUser.id && ( // Only show hamburger if user profile is fully loaded
                  <button
                      onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
                      className="text-gray-600 dark:text-dark-subtext focus:outline-none"
                      aria-label="Abrir menu"
                  >
                      <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d={isMobileMenuOpen ? "M6 18L18 6M6 6l12 12" : "M4 6h16M4 12h16m-7 6h7"}></path>
                      </svg>
                  </button>
                )}
            </div>
          </div>

          {isMobileMenuOpen && currentUser && currentUser.id && ( // Only show mobile menu if user profile is fully loaded
            <div className="md:hidden mt-3 py-2 border-t border-gray-200 dark:border-gray-700 animate-slide-in">
              <nav className="flex flex-col space-y-1">
                {navLinks.map(link => (
                  <NavLink key={link.page + '-mobile'} {...link} isMobile />
                ))}
                 <Button variant="ghost" onClick={handleLogout} className="w-full !justify-start !py-3 !font-medium !text-sm text-red-500 hover:bg-red-50 dark:hover:bg-red-900" leftIcon={<LogoutIcon className="w-5 h-5"/>}>
                    Logout
                </Button>
              </nav>
            </div>
          )}
        </div>
      </header>

      <main className="flex-grow">
        {renderPage()}
      </main>

      <footer className="bg-gray-200 dark:bg-dark-surface text-center p-4 text-sm text-gray-600 dark:text-dark-subtext">
        &copy; {new Date().getFullYear()} {APP_NAME}. Todos os direitos reservados.
      </footer>
    </div>
  );
};

export default App;